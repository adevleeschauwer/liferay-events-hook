package com.liferay.events.global.mobile.model.impl;

import com.liferay.events.global.mobile.model.EventContact;
import com.liferay.events.global.mobile.model.EventContactModel;
import com.liferay.events.global.mobile.model.EventContactSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventContact service. Represents a row in the &quot;Matcher_EventContact&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.events.global.mobile.model.EventContactModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventContactImpl}.
 * </p>
 *
 * @author James Falkner
 * @see EventContactImpl
 * @see com.liferay.events.global.mobile.model.EventContact
 * @see com.liferay.events.global.mobile.model.EventContactModel
 * @generated
 */
@JSON(strict = true)
public class EventContactModelImpl extends BaseModelImpl<EventContact>
    implements EventContactModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a event contact model instance should use the {@link com.liferay.events.global.mobile.model.EventContact} interface instead.
     */
    public static final String TABLE_NAME = "Matcher_EventContact";
    public static final Object[][] TABLE_COLUMNS = {
            { "givenName", Types.VARCHAR },
            { "fullName", Types.VARCHAR },
            { "emailAddress", Types.VARCHAR },
            { "city", Types.VARCHAR },
            { "country", Types.VARCHAR },
            { "lat", Types.DOUBLE },
            { "lng", Types.DOUBLE },
            { "jobTitle", Types.VARCHAR },
            { "company", Types.VARCHAR },
            { "industry", Types.VARCHAR },
            { "interests", Types.VARCHAR },
            { "desires", Types.VARCHAR },
            { "expertise", Types.VARCHAR },
            { "attendeeType", Types.VARCHAR },
            { "interestedIds", Types.VARCHAR },
            { "picUrl", Types.VARCHAR },
            { "eventId", Types.VARCHAR },
            { "verified", Types.BOOLEAN },
            { "eventContactId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Matcher_EventContact (givenName VARCHAR(256) null,fullName VARCHAR(256) null,emailAddress VARCHAR(256) null,city VARCHAR(75) null,country VARCHAR(75) null,lat DOUBLE,lng DOUBLE,jobTitle VARCHAR(75) null,company VARCHAR(1024) null,industry VARCHAR(75) null,interests TEXT null,desires TEXT null,expertise TEXT null,attendeeType VARCHAR(75) null,interestedIds TEXT null,picUrl VARCHAR(2000) null,eventId VARCHAR(75) null,verified BOOLEAN,eventContactId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Matcher_EventContact";
    public static final String ORDER_BY_JPQL = " ORDER BY eventContact.eventContactId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Matcher_EventContact.eventContactId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.events.global.mobile.model.EventContact"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.events.global.mobile.model.EventContact"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.events.global.mobile.model.EventContact"),
            true);
    public static long EMAILADDRESS_COLUMN_BITMASK = 1L;
    public static long EVENTCONTACTID_COLUMN_BITMASK = 2L;
    public static long EVENTID_COLUMN_BITMASK = 4L;
    public static long VERIFIED_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.events.global.mobile.model.EventContact"));
    private static ClassLoader _classLoader = EventContact.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EventContact.class
        };
    private String _givenName;
    private String _fullName;
    private String _emailAddress;
    private String _originalEmailAddress;
    private String _city;
    private String _country;
    private double _lat;
    private double _lng;
    private String _jobTitle;
    private String _company;
    private String _industry;
    private String _interests;
    private String _desires;
    private String _expertise;
    private String _attendeeType;
    private String _interestedIds;
    private String _picUrl;
    private String _eventId;
    private String _originalEventId;
    private boolean _verified;
    private boolean _originalVerified;
    private boolean _setOriginalVerified;
    private long _eventContactId;
    private long _originalEventContactId;
    private boolean _setOriginalEventContactId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private EventContact _escapedModel;

    public EventContactModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EventContact toModel(EventContactSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EventContact model = new EventContactImpl();

        model.setGivenName(soapModel.getGivenName());
        model.setFullName(soapModel.getFullName());
        model.setEmailAddress(soapModel.getEmailAddress());
        model.setCity(soapModel.getCity());
        model.setCountry(soapModel.getCountry());
        model.setLat(soapModel.getLat());
        model.setLng(soapModel.getLng());
        model.setJobTitle(soapModel.getJobTitle());
        model.setCompany(soapModel.getCompany());
        model.setIndustry(soapModel.getIndustry());
        model.setInterests(soapModel.getInterests());
        model.setDesires(soapModel.getDesires());
        model.setExpertise(soapModel.getExpertise());
        model.setAttendeeType(soapModel.getAttendeeType());
        model.setInterestedIds(soapModel.getInterestedIds());
        model.setPicUrl(soapModel.getPicUrl());
        model.setEventId(soapModel.getEventId());
        model.setVerified(soapModel.getVerified());
        model.setEventContactId(soapModel.getEventContactId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EventContact> toModels(EventContactSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EventContact> models = new ArrayList<EventContact>(soapModels.length);

        for (EventContactSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _eventContactId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setEventContactId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _eventContactId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EventContact.class;
    }

    @Override
    public String getModelClassName() {
        return EventContact.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("givenName", getGivenName());
        attributes.put("fullName", getFullName());
        attributes.put("emailAddress", getEmailAddress());
        attributes.put("city", getCity());
        attributes.put("country", getCountry());
        attributes.put("lat", getLat());
        attributes.put("lng", getLng());
        attributes.put("jobTitle", getJobTitle());
        attributes.put("company", getCompany());
        attributes.put("industry", getIndustry());
        attributes.put("interests", getInterests());
        attributes.put("desires", getDesires());
        attributes.put("expertise", getExpertise());
        attributes.put("attendeeType", getAttendeeType());
        attributes.put("interestedIds", getInterestedIds());
        attributes.put("picUrl", getPicUrl());
        attributes.put("eventId", getEventId());
        attributes.put("verified", getVerified());
        attributes.put("eventContactId", getEventContactId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String givenName = (String) attributes.get("givenName");

        if (givenName != null) {
            setGivenName(givenName);
        }

        String fullName = (String) attributes.get("fullName");

        if (fullName != null) {
            setFullName(fullName);
        }

        String emailAddress = (String) attributes.get("emailAddress");

        if (emailAddress != null) {
            setEmailAddress(emailAddress);
        }

        String city = (String) attributes.get("city");

        if (city != null) {
            setCity(city);
        }

        String country = (String) attributes.get("country");

        if (country != null) {
            setCountry(country);
        }

        Double lat = (Double) attributes.get("lat");

        if (lat != null) {
            setLat(lat);
        }

        Double lng = (Double) attributes.get("lng");

        if (lng != null) {
            setLng(lng);
        }

        String jobTitle = (String) attributes.get("jobTitle");

        if (jobTitle != null) {
            setJobTitle(jobTitle);
        }

        String company = (String) attributes.get("company");

        if (company != null) {
            setCompany(company);
        }

        String industry = (String) attributes.get("industry");

        if (industry != null) {
            setIndustry(industry);
        }

        String interests = (String) attributes.get("interests");

        if (interests != null) {
            setInterests(interests);
        }

        String desires = (String) attributes.get("desires");

        if (desires != null) {
            setDesires(desires);
        }

        String expertise = (String) attributes.get("expertise");

        if (expertise != null) {
            setExpertise(expertise);
        }

        String attendeeType = (String) attributes.get("attendeeType");

        if (attendeeType != null) {
            setAttendeeType(attendeeType);
        }

        String interestedIds = (String) attributes.get("interestedIds");

        if (interestedIds != null) {
            setInterestedIds(interestedIds);
        }

        String picUrl = (String) attributes.get("picUrl");

        if (picUrl != null) {
            setPicUrl(picUrl);
        }

        String eventId = (String) attributes.get("eventId");

        if (eventId != null) {
            setEventId(eventId);
        }

        Boolean verified = (Boolean) attributes.get("verified");

        if (verified != null) {
            setVerified(verified);
        }

        Long eventContactId = (Long) attributes.get("eventContactId");

        if (eventContactId != null) {
            setEventContactId(eventContactId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public String getGivenName() {
        if (_givenName == null) {
            return StringPool.BLANK;
        } else {
            return _givenName;
        }
    }

    @Override
    public void setGivenName(String givenName) {
        _givenName = givenName;
    }

    @JSON
    @Override
    public String getFullName() {
        if (_fullName == null) {
            return StringPool.BLANK;
        } else {
            return _fullName;
        }
    }

    @Override
    public void setFullName(String fullName) {
        _fullName = fullName;
    }

    @JSON(include = false)
    @Override
    public String getEmailAddress() {
        if (_emailAddress == null) {
            return StringPool.BLANK;
        } else {
            return _emailAddress;
        }
    }

    @Override
    public void setEmailAddress(String emailAddress) {
        _columnBitmask |= EMAILADDRESS_COLUMN_BITMASK;

        if (_originalEmailAddress == null) {
            _originalEmailAddress = _emailAddress;
        }

        _emailAddress = emailAddress;
    }

    public String getOriginalEmailAddress() {
        return GetterUtil.getString(_originalEmailAddress);
    }

    @JSON
    @Override
    public String getCity() {
        if (_city == null) {
            return StringPool.BLANK;
        } else {
            return _city;
        }
    }

    @Override
    public void setCity(String city) {
        _city = city;
    }

    @JSON
    @Override
    public String getCountry() {
        if (_country == null) {
            return StringPool.BLANK;
        } else {
            return _country;
        }
    }

    @Override
    public void setCountry(String country) {
        _country = country;
    }

    @JSON
    @Override
    public double getLat() {
        return _lat;
    }

    @Override
    public void setLat(double lat) {
        _lat = lat;
    }

    @JSON
    @Override
    public double getLng() {
        return _lng;
    }

    @Override
    public void setLng(double lng) {
        _lng = lng;
    }

    @JSON
    @Override
    public String getJobTitle() {
        if (_jobTitle == null) {
            return StringPool.BLANK;
        } else {
            return _jobTitle;
        }
    }

    @Override
    public void setJobTitle(String jobTitle) {
        _jobTitle = jobTitle;
    }

    @JSON
    @Override
    public String getCompany() {
        if (_company == null) {
            return StringPool.BLANK;
        } else {
            return _company;
        }
    }

    @Override
    public void setCompany(String company) {
        _company = company;
    }

    @JSON
    @Override
    public String getIndustry() {
        if (_industry == null) {
            return StringPool.BLANK;
        } else {
            return _industry;
        }
    }

    @Override
    public void setIndustry(String industry) {
        _industry = industry;
    }

    @JSON
    @Override
    public String getInterests() {
        if (_interests == null) {
            return StringPool.BLANK;
        } else {
            return _interests;
        }
    }

    @Override
    public void setInterests(String interests) {
        _interests = interests;
    }

    @JSON
    @Override
    public String getDesires() {
        if (_desires == null) {
            return StringPool.BLANK;
        } else {
            return _desires;
        }
    }

    @Override
    public void setDesires(String desires) {
        _desires = desires;
    }

    @JSON
    @Override
    public String getExpertise() {
        if (_expertise == null) {
            return StringPool.BLANK;
        } else {
            return _expertise;
        }
    }

    @Override
    public void setExpertise(String expertise) {
        _expertise = expertise;
    }

    @JSON
    @Override
    public String getAttendeeType() {
        if (_attendeeType == null) {
            return StringPool.BLANK;
        } else {
            return _attendeeType;
        }
    }

    @Override
    public void setAttendeeType(String attendeeType) {
        _attendeeType = attendeeType;
    }

    @JSON(include = false)
    @Override
    public String getInterestedIds() {
        if (_interestedIds == null) {
            return StringPool.BLANK;
        } else {
            return _interestedIds;
        }
    }

    @Override
    public void setInterestedIds(String interestedIds) {
        _interestedIds = interestedIds;
    }

    @JSON
    @Override
    public String getPicUrl() {
        if (_picUrl == null) {
            return StringPool.BLANK;
        } else {
            return _picUrl;
        }
    }

    @Override
    public void setPicUrl(String picUrl) {
        _picUrl = picUrl;
    }

    @JSON
    @Override
    public String getEventId() {
        if (_eventId == null) {
            return StringPool.BLANK;
        } else {
            return _eventId;
        }
    }

    @Override
    public void setEventId(String eventId) {
        _columnBitmask |= EVENTID_COLUMN_BITMASK;

        if (_originalEventId == null) {
            _originalEventId = _eventId;
        }

        _eventId = eventId;
    }

    public String getOriginalEventId() {
        return GetterUtil.getString(_originalEventId);
    }

    @JSON(include = false)
    @Override
    public boolean getVerified() {
        return _verified;
    }

    @Override
    public boolean isVerified() {
        return _verified;
    }

    @Override
    public void setVerified(boolean verified) {
        _columnBitmask |= VERIFIED_COLUMN_BITMASK;

        if (!_setOriginalVerified) {
            _setOriginalVerified = true;

            _originalVerified = _verified;
        }

        _verified = verified;
    }

    public boolean getOriginalVerified() {
        return _originalVerified;
    }

    @JSON
    @Override
    public long getEventContactId() {
        return _eventContactId;
    }

    @Override
    public void setEventContactId(long eventContactId) {
        _columnBitmask |= EVENTCONTACTID_COLUMN_BITMASK;

        if (!_setOriginalEventContactId) {
            _setOriginalEventContactId = true;

            _originalEventContactId = _eventContactId;
        }

        _eventContactId = eventContactId;
    }

    public long getOriginalEventContactId() {
        return _originalEventContactId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            EventContact.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EventContact toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EventContact) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EventContactImpl eventContactImpl = new EventContactImpl();

        eventContactImpl.setGivenName(getGivenName());
        eventContactImpl.setFullName(getFullName());
        eventContactImpl.setEmailAddress(getEmailAddress());
        eventContactImpl.setCity(getCity());
        eventContactImpl.setCountry(getCountry());
        eventContactImpl.setLat(getLat());
        eventContactImpl.setLng(getLng());
        eventContactImpl.setJobTitle(getJobTitle());
        eventContactImpl.setCompany(getCompany());
        eventContactImpl.setIndustry(getIndustry());
        eventContactImpl.setInterests(getInterests());
        eventContactImpl.setDesires(getDesires());
        eventContactImpl.setExpertise(getExpertise());
        eventContactImpl.setAttendeeType(getAttendeeType());
        eventContactImpl.setInterestedIds(getInterestedIds());
        eventContactImpl.setPicUrl(getPicUrl());
        eventContactImpl.setEventId(getEventId());
        eventContactImpl.setVerified(getVerified());
        eventContactImpl.setEventContactId(getEventContactId());
        eventContactImpl.setGroupId(getGroupId());
        eventContactImpl.setCompanyId(getCompanyId());
        eventContactImpl.setUserId(getUserId());
        eventContactImpl.setUserName(getUserName());
        eventContactImpl.setCreateDate(getCreateDate());
        eventContactImpl.setModifiedDate(getModifiedDate());

        eventContactImpl.resetOriginalValues();

        return eventContactImpl;
    }

    @Override
    public int compareTo(EventContact eventContact) {
        long primaryKey = eventContact.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EventContact)) {
            return false;
        }

        EventContact eventContact = (EventContact) obj;

        long primaryKey = eventContact.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EventContactModelImpl eventContactModelImpl = this;

        eventContactModelImpl._originalEmailAddress = eventContactModelImpl._emailAddress;

        eventContactModelImpl._originalEventId = eventContactModelImpl._eventId;

        eventContactModelImpl._originalVerified = eventContactModelImpl._verified;

        eventContactModelImpl._setOriginalVerified = false;

        eventContactModelImpl._originalEventContactId = eventContactModelImpl._eventContactId;

        eventContactModelImpl._setOriginalEventContactId = false;

        eventContactModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EventContact> toCacheModel() {
        EventContactCacheModel eventContactCacheModel = new EventContactCacheModel();

        eventContactCacheModel.givenName = getGivenName();

        String givenName = eventContactCacheModel.givenName;

        if ((givenName != null) && (givenName.length() == 0)) {
            eventContactCacheModel.givenName = null;
        }

        eventContactCacheModel.fullName = getFullName();

        String fullName = eventContactCacheModel.fullName;

        if ((fullName != null) && (fullName.length() == 0)) {
            eventContactCacheModel.fullName = null;
        }

        eventContactCacheModel.emailAddress = getEmailAddress();

        String emailAddress = eventContactCacheModel.emailAddress;

        if ((emailAddress != null) && (emailAddress.length() == 0)) {
            eventContactCacheModel.emailAddress = null;
        }

        eventContactCacheModel.city = getCity();

        String city = eventContactCacheModel.city;

        if ((city != null) && (city.length() == 0)) {
            eventContactCacheModel.city = null;
        }

        eventContactCacheModel.country = getCountry();

        String country = eventContactCacheModel.country;

        if ((country != null) && (country.length() == 0)) {
            eventContactCacheModel.country = null;
        }

        eventContactCacheModel.lat = getLat();

        eventContactCacheModel.lng = getLng();

        eventContactCacheModel.jobTitle = getJobTitle();

        String jobTitle = eventContactCacheModel.jobTitle;

        if ((jobTitle != null) && (jobTitle.length() == 0)) {
            eventContactCacheModel.jobTitle = null;
        }

        eventContactCacheModel.company = getCompany();

        String company = eventContactCacheModel.company;

        if ((company != null) && (company.length() == 0)) {
            eventContactCacheModel.company = null;
        }

        eventContactCacheModel.industry = getIndustry();

        String industry = eventContactCacheModel.industry;

        if ((industry != null) && (industry.length() == 0)) {
            eventContactCacheModel.industry = null;
        }

        eventContactCacheModel.interests = getInterests();

        String interests = eventContactCacheModel.interests;

        if ((interests != null) && (interests.length() == 0)) {
            eventContactCacheModel.interests = null;
        }

        eventContactCacheModel.desires = getDesires();

        String desires = eventContactCacheModel.desires;

        if ((desires != null) && (desires.length() == 0)) {
            eventContactCacheModel.desires = null;
        }

        eventContactCacheModel.expertise = getExpertise();

        String expertise = eventContactCacheModel.expertise;

        if ((expertise != null) && (expertise.length() == 0)) {
            eventContactCacheModel.expertise = null;
        }

        eventContactCacheModel.attendeeType = getAttendeeType();

        String attendeeType = eventContactCacheModel.attendeeType;

        if ((attendeeType != null) && (attendeeType.length() == 0)) {
            eventContactCacheModel.attendeeType = null;
        }

        eventContactCacheModel.interestedIds = getInterestedIds();

        String interestedIds = eventContactCacheModel.interestedIds;

        if ((interestedIds != null) && (interestedIds.length() == 0)) {
            eventContactCacheModel.interestedIds = null;
        }

        eventContactCacheModel.picUrl = getPicUrl();

        String picUrl = eventContactCacheModel.picUrl;

        if ((picUrl != null) && (picUrl.length() == 0)) {
            eventContactCacheModel.picUrl = null;
        }

        eventContactCacheModel.eventId = getEventId();

        String eventId = eventContactCacheModel.eventId;

        if ((eventId != null) && (eventId.length() == 0)) {
            eventContactCacheModel.eventId = null;
        }

        eventContactCacheModel.verified = getVerified();

        eventContactCacheModel.eventContactId = getEventContactId();

        eventContactCacheModel.groupId = getGroupId();

        eventContactCacheModel.companyId = getCompanyId();

        eventContactCacheModel.userId = getUserId();

        eventContactCacheModel.userName = getUserName();

        String userName = eventContactCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            eventContactCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            eventContactCacheModel.createDate = createDate.getTime();
        } else {
            eventContactCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            eventContactCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            eventContactCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return eventContactCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(51);

        sb.append("{givenName=");
        sb.append(getGivenName());
        sb.append(", fullName=");
        sb.append(getFullName());
        sb.append(", emailAddress=");
        sb.append(getEmailAddress());
        sb.append(", city=");
        sb.append(getCity());
        sb.append(", country=");
        sb.append(getCountry());
        sb.append(", lat=");
        sb.append(getLat());
        sb.append(", lng=");
        sb.append(getLng());
        sb.append(", jobTitle=");
        sb.append(getJobTitle());
        sb.append(", company=");
        sb.append(getCompany());
        sb.append(", industry=");
        sb.append(getIndustry());
        sb.append(", interests=");
        sb.append(getInterests());
        sb.append(", desires=");
        sb.append(getDesires());
        sb.append(", expertise=");
        sb.append(getExpertise());
        sb.append(", attendeeType=");
        sb.append(getAttendeeType());
        sb.append(", interestedIds=");
        sb.append(getInterestedIds());
        sb.append(", picUrl=");
        sb.append(getPicUrl());
        sb.append(", eventId=");
        sb.append(getEventId());
        sb.append(", verified=");
        sb.append(getVerified());
        sb.append(", eventContactId=");
        sb.append(getEventContactId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(79);

        sb.append("<model><model-name>");
        sb.append("com.liferay.events.global.mobile.model.EventContact");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>givenName</column-name><column-value><![CDATA[");
        sb.append(getGivenName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>fullName</column-name><column-value><![CDATA[");
        sb.append(getFullName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>emailAddress</column-name><column-value><![CDATA[");
        sb.append(getEmailAddress());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>city</column-name><column-value><![CDATA[");
        sb.append(getCity());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>country</column-name><column-value><![CDATA[");
        sb.append(getCountry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lat</column-name><column-value><![CDATA[");
        sb.append(getLat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lng</column-name><column-value><![CDATA[");
        sb.append(getLng());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>jobTitle</column-name><column-value><![CDATA[");
        sb.append(getJobTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>company</column-name><column-value><![CDATA[");
        sb.append(getCompany());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>industry</column-name><column-value><![CDATA[");
        sb.append(getIndustry());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interests</column-name><column-value><![CDATA[");
        sb.append(getInterests());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>desires</column-name><column-value><![CDATA[");
        sb.append(getDesires());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>expertise</column-name><column-value><![CDATA[");
        sb.append(getExpertise());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attendeeType</column-name><column-value><![CDATA[");
        sb.append(getAttendeeType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>interestedIds</column-name><column-value><![CDATA[");
        sb.append(getInterestedIds());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>picUrl</column-name><column-value><![CDATA[");
        sb.append(getPicUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventId</column-name><column-value><![CDATA[");
        sb.append(getEventId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>verified</column-name><column-value><![CDATA[");
        sb.append(getVerified());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventContactId</column-name><column-value><![CDATA[");
        sb.append(getEventContactId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
