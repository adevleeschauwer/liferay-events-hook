package com.liferay.events.global.mobile.model.impl;

import com.liferay.events.global.mobile.model.EventPollAnswer;
import com.liferay.events.global.mobile.model.EventPollAnswerModel;
import com.liferay.events.global.mobile.model.EventPollAnswerSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventPollAnswer service. Represents a row in the &quot;Matcher_EventPollAnswer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.events.global.mobile.model.EventPollAnswerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventPollAnswerImpl}.
 * </p>
 *
 * @author James Falkner
 * @see EventPollAnswerImpl
 * @see com.liferay.events.global.mobile.model.EventPollAnswer
 * @see com.liferay.events.global.mobile.model.EventPollAnswerModel
 * @generated
 */
@JSON(strict = true)
public class EventPollAnswerModelImpl extends BaseModelImpl<EventPollAnswer>
    implements EventPollAnswerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a event poll answer model instance should use the {@link com.liferay.events.global.mobile.model.EventPollAnswer} interface instead.
     */
    public static final String TABLE_NAME = "Matcher_EventPollAnswer";
    public static final Object[][] TABLE_COLUMNS = {
            { "questionId", Types.BIGINT },
            { "clientId", Types.VARCHAR },
            { "payload", Types.VARCHAR },
            { "answer", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "answerId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Matcher_EventPollAnswer (questionId LONG,clientId VARCHAR(75) null,payload TEXT null,answer TEXT null,createDate DATE null,answerId LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table Matcher_EventPollAnswer";
    public static final String ORDER_BY_JPQL = " ORDER BY eventPollAnswer.answerId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Matcher_EventPollAnswer.answerId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.events.global.mobile.model.EventPollAnswer"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.events.global.mobile.model.EventPollAnswer"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.events.global.mobile.model.EventPollAnswer"),
            true);
    public static long CLIENTID_COLUMN_BITMASK = 1L;
    public static long QUESTIONID_COLUMN_BITMASK = 2L;
    public static long ANSWERID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.events.global.mobile.model.EventPollAnswer"));
    private static ClassLoader _classLoader = EventPollAnswer.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EventPollAnswer.class
        };
    private long _questionId;
    private long _originalQuestionId;
    private boolean _setOriginalQuestionId;
    private String _clientId;
    private String _originalClientId;
    private String _payload;
    private String _answer;
    private Date _createDate;
    private long _answerId;
    private long _columnBitmask;
    private EventPollAnswer _escapedModel;

    public EventPollAnswerModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EventPollAnswer toModel(EventPollAnswerSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EventPollAnswer model = new EventPollAnswerImpl();

        model.setQuestionId(soapModel.getQuestionId());
        model.setClientId(soapModel.getClientId());
        model.setPayload(soapModel.getPayload());
        model.setAnswer(soapModel.getAnswer());
        model.setCreateDate(soapModel.getCreateDate());
        model.setAnswerId(soapModel.getAnswerId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EventPollAnswer> toModels(
        EventPollAnswerSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EventPollAnswer> models = new ArrayList<EventPollAnswer>(soapModels.length);

        for (EventPollAnswerSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _answerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setAnswerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _answerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EventPollAnswer.class;
    }

    @Override
    public String getModelClassName() {
        return EventPollAnswer.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("questionId", getQuestionId());
        attributes.put("clientId", getClientId());
        attributes.put("payload", getPayload());
        attributes.put("answer", getAnswer());
        attributes.put("createDate", getCreateDate());
        attributes.put("answerId", getAnswerId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long questionId = (Long) attributes.get("questionId");

        if (questionId != null) {
            setQuestionId(questionId);
        }

        String clientId = (String) attributes.get("clientId");

        if (clientId != null) {
            setClientId(clientId);
        }

        String payload = (String) attributes.get("payload");

        if (payload != null) {
            setPayload(payload);
        }

        String answer = (String) attributes.get("answer");

        if (answer != null) {
            setAnswer(answer);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Long answerId = (Long) attributes.get("answerId");

        if (answerId != null) {
            setAnswerId(answerId);
        }
    }

    @JSON
    @Override
    public long getQuestionId() {
        return _questionId;
    }

    @Override
    public void setQuestionId(long questionId) {
        _columnBitmask |= QUESTIONID_COLUMN_BITMASK;

        if (!_setOriginalQuestionId) {
            _setOriginalQuestionId = true;

            _originalQuestionId = _questionId;
        }

        _questionId = questionId;
    }

    public long getOriginalQuestionId() {
        return _originalQuestionId;
    }

    @JSON
    @Override
    public String getClientId() {
        if (_clientId == null) {
            return StringPool.BLANK;
        } else {
            return _clientId;
        }
    }

    @Override
    public void setClientId(String clientId) {
        _columnBitmask |= CLIENTID_COLUMN_BITMASK;

        if (_originalClientId == null) {
            _originalClientId = _clientId;
        }

        _clientId = clientId;
    }

    public String getOriginalClientId() {
        return GetterUtil.getString(_originalClientId);
    }

    @JSON
    @Override
    public String getPayload() {
        if (_payload == null) {
            return StringPool.BLANK;
        } else {
            return _payload;
        }
    }

    @Override
    public void setPayload(String payload) {
        _payload = payload;
    }

    @JSON
    @Override
    public String getAnswer() {
        if (_answer == null) {
            return StringPool.BLANK;
        } else {
            return _answer;
        }
    }

    @Override
    public void setAnswer(String answer) {
        _answer = answer;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public long getAnswerId() {
        return _answerId;
    }

    @Override
    public void setAnswerId(long answerId) {
        _answerId = answerId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            EventPollAnswer.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EventPollAnswer toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EventPollAnswer) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EventPollAnswerImpl eventPollAnswerImpl = new EventPollAnswerImpl();

        eventPollAnswerImpl.setQuestionId(getQuestionId());
        eventPollAnswerImpl.setClientId(getClientId());
        eventPollAnswerImpl.setPayload(getPayload());
        eventPollAnswerImpl.setAnswer(getAnswer());
        eventPollAnswerImpl.setCreateDate(getCreateDate());
        eventPollAnswerImpl.setAnswerId(getAnswerId());

        eventPollAnswerImpl.resetOriginalValues();

        return eventPollAnswerImpl;
    }

    @Override
    public int compareTo(EventPollAnswer eventPollAnswer) {
        long primaryKey = eventPollAnswer.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EventPollAnswer)) {
            return false;
        }

        EventPollAnswer eventPollAnswer = (EventPollAnswer) obj;

        long primaryKey = eventPollAnswer.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EventPollAnswerModelImpl eventPollAnswerModelImpl = this;

        eventPollAnswerModelImpl._originalQuestionId = eventPollAnswerModelImpl._questionId;

        eventPollAnswerModelImpl._setOriginalQuestionId = false;

        eventPollAnswerModelImpl._originalClientId = eventPollAnswerModelImpl._clientId;

        eventPollAnswerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EventPollAnswer> toCacheModel() {
        EventPollAnswerCacheModel eventPollAnswerCacheModel = new EventPollAnswerCacheModel();

        eventPollAnswerCacheModel.questionId = getQuestionId();

        eventPollAnswerCacheModel.clientId = getClientId();

        String clientId = eventPollAnswerCacheModel.clientId;

        if ((clientId != null) && (clientId.length() == 0)) {
            eventPollAnswerCacheModel.clientId = null;
        }

        eventPollAnswerCacheModel.payload = getPayload();

        String payload = eventPollAnswerCacheModel.payload;

        if ((payload != null) && (payload.length() == 0)) {
            eventPollAnswerCacheModel.payload = null;
        }

        eventPollAnswerCacheModel.answer = getAnswer();

        String answer = eventPollAnswerCacheModel.answer;

        if ((answer != null) && (answer.length() == 0)) {
            eventPollAnswerCacheModel.answer = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            eventPollAnswerCacheModel.createDate = createDate.getTime();
        } else {
            eventPollAnswerCacheModel.createDate = Long.MIN_VALUE;
        }

        eventPollAnswerCacheModel.answerId = getAnswerId();

        return eventPollAnswerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{questionId=");
        sb.append(getQuestionId());
        sb.append(", clientId=");
        sb.append(getClientId());
        sb.append(", payload=");
        sb.append(getPayload());
        sb.append(", answer=");
        sb.append(getAnswer());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", answerId=");
        sb.append(getAnswerId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.liferay.events.global.mobile.model.EventPollAnswer");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>questionId</column-name><column-value><![CDATA[");
        sb.append(getQuestionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>clientId</column-name><column-value><![CDATA[");
        sb.append(getClientId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>payload</column-name><column-value><![CDATA[");
        sb.append(getPayload());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>answer</column-name><column-value><![CDATA[");
        sb.append(getAnswer());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>answerId</column-name><column-value><![CDATA[");
        sb.append(getAnswerId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
