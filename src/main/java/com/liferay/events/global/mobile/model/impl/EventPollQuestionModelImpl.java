package com.liferay.events.global.mobile.model.impl;

import com.liferay.events.global.mobile.model.EventPollQuestion;
import com.liferay.events.global.mobile.model.EventPollQuestionModel;
import com.liferay.events.global.mobile.model.EventPollQuestionSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the EventPollQuestion service. Represents a row in the &quot;Matcher_EventPollQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.events.global.mobile.model.EventPollQuestionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EventPollQuestionImpl}.
 * </p>
 *
 * @author James Falkner
 * @see EventPollQuestionImpl
 * @see com.liferay.events.global.mobile.model.EventPollQuestion
 * @see com.liferay.events.global.mobile.model.EventPollQuestionModel
 * @generated
 */
@JSON(strict = true)
public class EventPollQuestionModelImpl extends BaseModelImpl<EventPollQuestion>
    implements EventPollQuestionModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a event poll question model instance should use the {@link com.liferay.events.global.mobile.model.EventPollQuestion} interface instead.
     */
    public static final String TABLE_NAME = "Matcher_EventPollQuestion";
    public static final Object[][] TABLE_COLUMNS = {
            { "eventId", Types.VARCHAR },
            { "sponsorName", Types.VARCHAR },
            { "shortTitle", Types.VARCHAR },
            { "question", Types.VARCHAR },
            { "questionType", Types.VARCHAR },
            { "choices", Types.VARCHAR },
            { "anonymousResults", Types.BOOLEAN },
            { "showResponseCount", Types.BOOLEAN },
            { "chartType", Types.VARCHAR },
            { "askForId", Types.BOOLEAN },
            { "idIntro", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "enabled", Types.BOOLEAN },
            { "autoEnable", Types.BOOLEAN },
            { "enableTriggerDate", Types.TIMESTAMP },
            { "enableTriggerTimezone", Types.VARCHAR },
            { "picUrl", Types.VARCHAR },
            { "questionId", Types.BIGINT }
        };
    public static final String TABLE_SQL_CREATE = "create table Matcher_EventPollQuestion (eventId VARCHAR(75) null,sponsorName VARCHAR(75) null,shortTitle VARCHAR(75) null,question TEXT null,questionType VARCHAR(75) null,choices TEXT null,anonymousResults BOOLEAN,showResponseCount BOOLEAN,chartType VARCHAR(75) null,askForId BOOLEAN,idIntro TEXT null,createDate DATE null,enabled BOOLEAN,autoEnable BOOLEAN,enableTriggerDate DATE null,enableTriggerTimezone VARCHAR(75) null,picUrl TEXT null,questionId LONG not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table Matcher_EventPollQuestion";
    public static final String ORDER_BY_JPQL = " ORDER BY eventPollQuestion.questionId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Matcher_EventPollQuestion.questionId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.events.global.mobile.model.EventPollQuestion"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.events.global.mobile.model.EventPollQuestion"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.events.global.mobile.model.EventPollQuestion"),
            true);
    public static long AUTOENABLE_COLUMN_BITMASK = 1L;
    public static long ENABLETRIGGERDATE_COLUMN_BITMASK = 2L;
    public static long ENABLED_COLUMN_BITMASK = 4L;
    public static long EVENTID_COLUMN_BITMASK = 8L;
    public static long QUESTIONID_COLUMN_BITMASK = 16L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.events.global.mobile.model.EventPollQuestion"));
    private static ClassLoader _classLoader = EventPollQuestion.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EventPollQuestion.class
        };
    private String _eventId;
    private String _originalEventId;
    private String _sponsorName;
    private String _shortTitle;
    private String _question;
    private String _questionType;
    private String _choices;
    private boolean _anonymousResults;
    private boolean _showResponseCount;
    private String _chartType;
    private boolean _askForId;
    private String _idIntro;
    private Date _createDate;
    private boolean _enabled;
    private boolean _originalEnabled;
    private boolean _setOriginalEnabled;
    private boolean _autoEnable;
    private boolean _originalAutoEnable;
    private boolean _setOriginalAutoEnable;
    private Date _enableTriggerDate;
    private Date _originalEnableTriggerDate;
    private String _enableTriggerTimezone;
    private String _picUrl;
    private long _questionId;
    private long _columnBitmask;
    private EventPollQuestion _escapedModel;

    public EventPollQuestionModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static EventPollQuestion toModel(EventPollQuestionSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        EventPollQuestion model = new EventPollQuestionImpl();

        model.setEventId(soapModel.getEventId());
        model.setSponsorName(soapModel.getSponsorName());
        model.setShortTitle(soapModel.getShortTitle());
        model.setQuestion(soapModel.getQuestion());
        model.setQuestionType(soapModel.getQuestionType());
        model.setChoices(soapModel.getChoices());
        model.setAnonymousResults(soapModel.getAnonymousResults());
        model.setShowResponseCount(soapModel.getShowResponseCount());
        model.setChartType(soapModel.getChartType());
        model.setAskForId(soapModel.getAskForId());
        model.setIdIntro(soapModel.getIdIntro());
        model.setCreateDate(soapModel.getCreateDate());
        model.setEnabled(soapModel.getEnabled());
        model.setAutoEnable(soapModel.getAutoEnable());
        model.setEnableTriggerDate(soapModel.getEnableTriggerDate());
        model.setEnableTriggerTimezone(soapModel.getEnableTriggerTimezone());
        model.setPicUrl(soapModel.getPicUrl());
        model.setQuestionId(soapModel.getQuestionId());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<EventPollQuestion> toModels(
        EventPollQuestionSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<EventPollQuestion> models = new ArrayList<EventPollQuestion>(soapModels.length);

        for (EventPollQuestionSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _questionId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setQuestionId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _questionId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EventPollQuestion.class;
    }

    @Override
    public String getModelClassName() {
        return EventPollQuestion.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("eventId", getEventId());
        attributes.put("sponsorName", getSponsorName());
        attributes.put("shortTitle", getShortTitle());
        attributes.put("question", getQuestion());
        attributes.put("questionType", getQuestionType());
        attributes.put("choices", getChoices());
        attributes.put("anonymousResults", getAnonymousResults());
        attributes.put("showResponseCount", getShowResponseCount());
        attributes.put("chartType", getChartType());
        attributes.put("askForId", getAskForId());
        attributes.put("idIntro", getIdIntro());
        attributes.put("createDate", getCreateDate());
        attributes.put("enabled", getEnabled());
        attributes.put("autoEnable", getAutoEnable());
        attributes.put("enableTriggerDate", getEnableTriggerDate());
        attributes.put("enableTriggerTimezone", getEnableTriggerTimezone());
        attributes.put("picUrl", getPicUrl());
        attributes.put("questionId", getQuestionId());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String eventId = (String) attributes.get("eventId");

        if (eventId != null) {
            setEventId(eventId);
        }

        String sponsorName = (String) attributes.get("sponsorName");

        if (sponsorName != null) {
            setSponsorName(sponsorName);
        }

        String shortTitle = (String) attributes.get("shortTitle");

        if (shortTitle != null) {
            setShortTitle(shortTitle);
        }

        String question = (String) attributes.get("question");

        if (question != null) {
            setQuestion(question);
        }

        String questionType = (String) attributes.get("questionType");

        if (questionType != null) {
            setQuestionType(questionType);
        }

        String choices = (String) attributes.get("choices");

        if (choices != null) {
            setChoices(choices);
        }

        Boolean anonymousResults = (Boolean) attributes.get("anonymousResults");

        if (anonymousResults != null) {
            setAnonymousResults(anonymousResults);
        }

        Boolean showResponseCount = (Boolean) attributes.get(
                "showResponseCount");

        if (showResponseCount != null) {
            setShowResponseCount(showResponseCount);
        }

        String chartType = (String) attributes.get("chartType");

        if (chartType != null) {
            setChartType(chartType);
        }

        Boolean askForId = (Boolean) attributes.get("askForId");

        if (askForId != null) {
            setAskForId(askForId);
        }

        String idIntro = (String) attributes.get("idIntro");

        if (idIntro != null) {
            setIdIntro(idIntro);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Boolean enabled = (Boolean) attributes.get("enabled");

        if (enabled != null) {
            setEnabled(enabled);
        }

        Boolean autoEnable = (Boolean) attributes.get("autoEnable");

        if (autoEnable != null) {
            setAutoEnable(autoEnable);
        }

        Date enableTriggerDate = (Date) attributes.get("enableTriggerDate");

        if (enableTriggerDate != null) {
            setEnableTriggerDate(enableTriggerDate);
        }

        String enableTriggerTimezone = (String) attributes.get(
                "enableTriggerTimezone");

        if (enableTriggerTimezone != null) {
            setEnableTriggerTimezone(enableTriggerTimezone);
        }

        String picUrl = (String) attributes.get("picUrl");

        if (picUrl != null) {
            setPicUrl(picUrl);
        }

        Long questionId = (Long) attributes.get("questionId");

        if (questionId != null) {
            setQuestionId(questionId);
        }
    }

    @JSON
    @Override
    public String getEventId() {
        if (_eventId == null) {
            return StringPool.BLANK;
        } else {
            return _eventId;
        }
    }

    @Override
    public void setEventId(String eventId) {
        _columnBitmask |= EVENTID_COLUMN_BITMASK;

        if (_originalEventId == null) {
            _originalEventId = _eventId;
        }

        _eventId = eventId;
    }

    public String getOriginalEventId() {
        return GetterUtil.getString(_originalEventId);
    }

    @JSON
    @Override
    public String getSponsorName() {
        if (_sponsorName == null) {
            return StringPool.BLANK;
        } else {
            return _sponsorName;
        }
    }

    @Override
    public void setSponsorName(String sponsorName) {
        _sponsorName = sponsorName;
    }

    @JSON
    @Override
    public String getShortTitle() {
        if (_shortTitle == null) {
            return StringPool.BLANK;
        } else {
            return _shortTitle;
        }
    }

    @Override
    public void setShortTitle(String shortTitle) {
        _shortTitle = shortTitle;
    }

    @JSON
    @Override
    public String getQuestion() {
        if (_question == null) {
            return StringPool.BLANK;
        } else {
            return _question;
        }
    }

    @Override
    public void setQuestion(String question) {
        _question = question;
    }

    @JSON
    @Override
    public String getQuestionType() {
        if (_questionType == null) {
            return StringPool.BLANK;
        } else {
            return _questionType;
        }
    }

    @Override
    public void setQuestionType(String questionType) {
        _questionType = questionType;
    }

    @JSON
    @Override
    public String getChoices() {
        if (_choices == null) {
            return StringPool.BLANK;
        } else {
            return _choices;
        }
    }

    @Override
    public void setChoices(String choices) {
        _choices = choices;
    }

    @JSON
    @Override
    public boolean getAnonymousResults() {
        return _anonymousResults;
    }

    @Override
    public boolean isAnonymousResults() {
        return _anonymousResults;
    }

    @Override
    public void setAnonymousResults(boolean anonymousResults) {
        _anonymousResults = anonymousResults;
    }

    @JSON
    @Override
    public boolean getShowResponseCount() {
        return _showResponseCount;
    }

    @Override
    public boolean isShowResponseCount() {
        return _showResponseCount;
    }

    @Override
    public void setShowResponseCount(boolean showResponseCount) {
        _showResponseCount = showResponseCount;
    }

    @JSON
    @Override
    public String getChartType() {
        if (_chartType == null) {
            return StringPool.BLANK;
        } else {
            return _chartType;
        }
    }

    @Override
    public void setChartType(String chartType) {
        _chartType = chartType;
    }

    @JSON
    @Override
    public boolean getAskForId() {
        return _askForId;
    }

    @Override
    public boolean isAskForId() {
        return _askForId;
    }

    @Override
    public void setAskForId(boolean askForId) {
        _askForId = askForId;
    }

    @JSON
    @Override
    public String getIdIntro() {
        if (_idIntro == null) {
            return StringPool.BLANK;
        } else {
            return _idIntro;
        }
    }

    @Override
    public void setIdIntro(String idIntro) {
        _idIntro = idIntro;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public boolean getEnabled() {
        return _enabled;
    }

    @Override
    public boolean isEnabled() {
        return _enabled;
    }

    @Override
    public void setEnabled(boolean enabled) {
        _columnBitmask |= ENABLED_COLUMN_BITMASK;

        if (!_setOriginalEnabled) {
            _setOriginalEnabled = true;

            _originalEnabled = _enabled;
        }

        _enabled = enabled;
    }

    public boolean getOriginalEnabled() {
        return _originalEnabled;
    }

    @JSON
    @Override
    public boolean getAutoEnable() {
        return _autoEnable;
    }

    @Override
    public boolean isAutoEnable() {
        return _autoEnable;
    }

    @Override
    public void setAutoEnable(boolean autoEnable) {
        _columnBitmask |= AUTOENABLE_COLUMN_BITMASK;

        if (!_setOriginalAutoEnable) {
            _setOriginalAutoEnable = true;

            _originalAutoEnable = _autoEnable;
        }

        _autoEnable = autoEnable;
    }

    public boolean getOriginalAutoEnable() {
        return _originalAutoEnable;
    }

    @JSON
    @Override
    public Date getEnableTriggerDate() {
        return _enableTriggerDate;
    }

    @Override
    public void setEnableTriggerDate(Date enableTriggerDate) {
        _columnBitmask |= ENABLETRIGGERDATE_COLUMN_BITMASK;

        if (_originalEnableTriggerDate == null) {
            _originalEnableTriggerDate = _enableTriggerDate;
        }

        _enableTriggerDate = enableTriggerDate;
    }

    public Date getOriginalEnableTriggerDate() {
        return _originalEnableTriggerDate;
    }

    @JSON
    @Override
    public String getEnableTriggerTimezone() {
        if (_enableTriggerTimezone == null) {
            return StringPool.BLANK;
        } else {
            return _enableTriggerTimezone;
        }
    }

    @Override
    public void setEnableTriggerTimezone(String enableTriggerTimezone) {
        _enableTriggerTimezone = enableTriggerTimezone;
    }

    @JSON
    @Override
    public String getPicUrl() {
        if (_picUrl == null) {
            return StringPool.BLANK;
        } else {
            return _picUrl;
        }
    }

    @Override
    public void setPicUrl(String picUrl) {
        _picUrl = picUrl;
    }

    @JSON
    @Override
    public long getQuestionId() {
        return _questionId;
    }

    @Override
    public void setQuestionId(long questionId) {
        _questionId = questionId;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            EventPollQuestion.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EventPollQuestion toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EventPollQuestion) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EventPollQuestionImpl eventPollQuestionImpl = new EventPollQuestionImpl();

        eventPollQuestionImpl.setEventId(getEventId());
        eventPollQuestionImpl.setSponsorName(getSponsorName());
        eventPollQuestionImpl.setShortTitle(getShortTitle());
        eventPollQuestionImpl.setQuestion(getQuestion());
        eventPollQuestionImpl.setQuestionType(getQuestionType());
        eventPollQuestionImpl.setChoices(getChoices());
        eventPollQuestionImpl.setAnonymousResults(getAnonymousResults());
        eventPollQuestionImpl.setShowResponseCount(getShowResponseCount());
        eventPollQuestionImpl.setChartType(getChartType());
        eventPollQuestionImpl.setAskForId(getAskForId());
        eventPollQuestionImpl.setIdIntro(getIdIntro());
        eventPollQuestionImpl.setCreateDate(getCreateDate());
        eventPollQuestionImpl.setEnabled(getEnabled());
        eventPollQuestionImpl.setAutoEnable(getAutoEnable());
        eventPollQuestionImpl.setEnableTriggerDate(getEnableTriggerDate());
        eventPollQuestionImpl.setEnableTriggerTimezone(getEnableTriggerTimezone());
        eventPollQuestionImpl.setPicUrl(getPicUrl());
        eventPollQuestionImpl.setQuestionId(getQuestionId());

        eventPollQuestionImpl.resetOriginalValues();

        return eventPollQuestionImpl;
    }

    @Override
    public int compareTo(EventPollQuestion eventPollQuestion) {
        long primaryKey = eventPollQuestion.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EventPollQuestion)) {
            return false;
        }

        EventPollQuestion eventPollQuestion = (EventPollQuestion) obj;

        long primaryKey = eventPollQuestion.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EventPollQuestionModelImpl eventPollQuestionModelImpl = this;

        eventPollQuestionModelImpl._originalEventId = eventPollQuestionModelImpl._eventId;

        eventPollQuestionModelImpl._originalEnabled = eventPollQuestionModelImpl._enabled;

        eventPollQuestionModelImpl._setOriginalEnabled = false;

        eventPollQuestionModelImpl._originalAutoEnable = eventPollQuestionModelImpl._autoEnable;

        eventPollQuestionModelImpl._setOriginalAutoEnable = false;

        eventPollQuestionModelImpl._originalEnableTriggerDate = eventPollQuestionModelImpl._enableTriggerDate;

        eventPollQuestionModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EventPollQuestion> toCacheModel() {
        EventPollQuestionCacheModel eventPollQuestionCacheModel = new EventPollQuestionCacheModel();

        eventPollQuestionCacheModel.eventId = getEventId();

        String eventId = eventPollQuestionCacheModel.eventId;

        if ((eventId != null) && (eventId.length() == 0)) {
            eventPollQuestionCacheModel.eventId = null;
        }

        eventPollQuestionCacheModel.sponsorName = getSponsorName();

        String sponsorName = eventPollQuestionCacheModel.sponsorName;

        if ((sponsorName != null) && (sponsorName.length() == 0)) {
            eventPollQuestionCacheModel.sponsorName = null;
        }

        eventPollQuestionCacheModel.shortTitle = getShortTitle();

        String shortTitle = eventPollQuestionCacheModel.shortTitle;

        if ((shortTitle != null) && (shortTitle.length() == 0)) {
            eventPollQuestionCacheModel.shortTitle = null;
        }

        eventPollQuestionCacheModel.question = getQuestion();

        String question = eventPollQuestionCacheModel.question;

        if ((question != null) && (question.length() == 0)) {
            eventPollQuestionCacheModel.question = null;
        }

        eventPollQuestionCacheModel.questionType = getQuestionType();

        String questionType = eventPollQuestionCacheModel.questionType;

        if ((questionType != null) && (questionType.length() == 0)) {
            eventPollQuestionCacheModel.questionType = null;
        }

        eventPollQuestionCacheModel.choices = getChoices();

        String choices = eventPollQuestionCacheModel.choices;

        if ((choices != null) && (choices.length() == 0)) {
            eventPollQuestionCacheModel.choices = null;
        }

        eventPollQuestionCacheModel.anonymousResults = getAnonymousResults();

        eventPollQuestionCacheModel.showResponseCount = getShowResponseCount();

        eventPollQuestionCacheModel.chartType = getChartType();

        String chartType = eventPollQuestionCacheModel.chartType;

        if ((chartType != null) && (chartType.length() == 0)) {
            eventPollQuestionCacheModel.chartType = null;
        }

        eventPollQuestionCacheModel.askForId = getAskForId();

        eventPollQuestionCacheModel.idIntro = getIdIntro();

        String idIntro = eventPollQuestionCacheModel.idIntro;

        if ((idIntro != null) && (idIntro.length() == 0)) {
            eventPollQuestionCacheModel.idIntro = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            eventPollQuestionCacheModel.createDate = createDate.getTime();
        } else {
            eventPollQuestionCacheModel.createDate = Long.MIN_VALUE;
        }

        eventPollQuestionCacheModel.enabled = getEnabled();

        eventPollQuestionCacheModel.autoEnable = getAutoEnable();

        Date enableTriggerDate = getEnableTriggerDate();

        if (enableTriggerDate != null) {
            eventPollQuestionCacheModel.enableTriggerDate = enableTriggerDate.getTime();
        } else {
            eventPollQuestionCacheModel.enableTriggerDate = Long.MIN_VALUE;
        }

        eventPollQuestionCacheModel.enableTriggerTimezone = getEnableTriggerTimezone();

        String enableTriggerTimezone = eventPollQuestionCacheModel.enableTriggerTimezone;

        if ((enableTriggerTimezone != null) &&
                (enableTriggerTimezone.length() == 0)) {
            eventPollQuestionCacheModel.enableTriggerTimezone = null;
        }

        eventPollQuestionCacheModel.picUrl = getPicUrl();

        String picUrl = eventPollQuestionCacheModel.picUrl;

        if ((picUrl != null) && (picUrl.length() == 0)) {
            eventPollQuestionCacheModel.picUrl = null;
        }

        eventPollQuestionCacheModel.questionId = getQuestionId();

        return eventPollQuestionCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(37);

        sb.append("{eventId=");
        sb.append(getEventId());
        sb.append(", sponsorName=");
        sb.append(getSponsorName());
        sb.append(", shortTitle=");
        sb.append(getShortTitle());
        sb.append(", question=");
        sb.append(getQuestion());
        sb.append(", questionType=");
        sb.append(getQuestionType());
        sb.append(", choices=");
        sb.append(getChoices());
        sb.append(", anonymousResults=");
        sb.append(getAnonymousResults());
        sb.append(", showResponseCount=");
        sb.append(getShowResponseCount());
        sb.append(", chartType=");
        sb.append(getChartType());
        sb.append(", askForId=");
        sb.append(getAskForId());
        sb.append(", idIntro=");
        sb.append(getIdIntro());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", enabled=");
        sb.append(getEnabled());
        sb.append(", autoEnable=");
        sb.append(getAutoEnable());
        sb.append(", enableTriggerDate=");
        sb.append(getEnableTriggerDate());
        sb.append(", enableTriggerTimezone=");
        sb.append(getEnableTriggerTimezone());
        sb.append(", picUrl=");
        sb.append(getPicUrl());
        sb.append(", questionId=");
        sb.append(getQuestionId());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(58);

        sb.append("<model><model-name>");
        sb.append("com.liferay.events.global.mobile.model.EventPollQuestion");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>eventId</column-name><column-value><![CDATA[");
        sb.append(getEventId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>sponsorName</column-name><column-value><![CDATA[");
        sb.append(getSponsorName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>shortTitle</column-name><column-value><![CDATA[");
        sb.append(getShortTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>question</column-name><column-value><![CDATA[");
        sb.append(getQuestion());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>questionType</column-name><column-value><![CDATA[");
        sb.append(getQuestionType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>choices</column-name><column-value><![CDATA[");
        sb.append(getChoices());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>anonymousResults</column-name><column-value><![CDATA[");
        sb.append(getAnonymousResults());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>showResponseCount</column-name><column-value><![CDATA[");
        sb.append(getShowResponseCount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>chartType</column-name><column-value><![CDATA[");
        sb.append(getChartType());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>askForId</column-name><column-value><![CDATA[");
        sb.append(getAskForId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>idIntro</column-name><column-value><![CDATA[");
        sb.append(getIdIntro());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enabled</column-name><column-value><![CDATA[");
        sb.append(getEnabled());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>autoEnable</column-name><column-value><![CDATA[");
        sb.append(getAutoEnable());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enableTriggerDate</column-name><column-value><![CDATA[");
        sb.append(getEnableTriggerDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>enableTriggerTimezone</column-name><column-value><![CDATA[");
        sb.append(getEnableTriggerTimezone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>picUrl</column-name><column-value><![CDATA[");
        sb.append(getPicUrl());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>questionId</column-name><column-value><![CDATA[");
        sb.append(getQuestionId());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
