package com.liferay.events.global.mobile.model;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;

/**
 * The base model interface for the EventPollQuestion service. Represents a row in the &quot;Matcher_EventPollQuestion&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.liferay.events.global.mobile.model.impl.EventPollQuestionModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.liferay.events.global.mobile.model.impl.EventPollQuestionImpl}.
 * </p>
 *
 * @author James Falkner
 * @see EventPollQuestion
 * @see com.liferay.events.global.mobile.model.impl.EventPollQuestionImpl
 * @see com.liferay.events.global.mobile.model.impl.EventPollQuestionModelImpl
 * @generated
 */
public interface EventPollQuestionModel extends BaseModel<EventPollQuestion> {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this interface directly. All methods that expect a event poll question model instance should use the {@link EventPollQuestion} interface instead.
     */

    /**
     * Returns the primary key of this event poll question.
     *
     * @return the primary key of this event poll question
     */
    public long getPrimaryKey();

    /**
     * Sets the primary key of this event poll question.
     *
     * @param primaryKey the primary key of this event poll question
     */
    public void setPrimaryKey(long primaryKey);

    /**
     * Returns the event ID of this event poll question.
     *
     * @return the event ID of this event poll question
     */
    @AutoEscape
    public String getEventId();

    /**
     * Sets the event ID of this event poll question.
     *
     * @param eventId the event ID of this event poll question
     */
    public void setEventId(String eventId);

    /**
     * Returns the sponsor name of this event poll question.
     *
     * @return the sponsor name of this event poll question
     */
    @AutoEscape
    public String getSponsorName();

    /**
     * Sets the sponsor name of this event poll question.
     *
     * @param sponsorName the sponsor name of this event poll question
     */
    public void setSponsorName(String sponsorName);

    /**
     * Returns the short title of this event poll question.
     *
     * @return the short title of this event poll question
     */
    @AutoEscape
    public String getShortTitle();

    /**
     * Sets the short title of this event poll question.
     *
     * @param shortTitle the short title of this event poll question
     */
    public void setShortTitle(String shortTitle);

    /**
     * Returns the question of this event poll question.
     *
     * @return the question of this event poll question
     */
    @AutoEscape
    public String getQuestion();

    /**
     * Sets the question of this event poll question.
     *
     * @param question the question of this event poll question
     */
    public void setQuestion(String question);

    /**
     * Returns the question type of this event poll question.
     *
     * @return the question type of this event poll question
     */
    @AutoEscape
    public String getQuestionType();

    /**
     * Sets the question type of this event poll question.
     *
     * @param questionType the question type of this event poll question
     */
    public void setQuestionType(String questionType);

    /**
     * Returns the choices of this event poll question.
     *
     * @return the choices of this event poll question
     */
    @AutoEscape
    public String getChoices();

    /**
     * Sets the choices of this event poll question.
     *
     * @param choices the choices of this event poll question
     */
    public void setChoices(String choices);

    /**
     * Returns the anonymous results of this event poll question.
     *
     * @return the anonymous results of this event poll question
     */
    public boolean getAnonymousResults();

    /**
     * Returns <code>true</code> if this event poll question is anonymous results.
     *
     * @return <code>true</code> if this event poll question is anonymous results; <code>false</code> otherwise
     */
    public boolean isAnonymousResults();

    /**
     * Sets whether this event poll question is anonymous results.
     *
     * @param anonymousResults the anonymous results of this event poll question
     */
    public void setAnonymousResults(boolean anonymousResults);

    /**
     * Returns the show response count of this event poll question.
     *
     * @return the show response count of this event poll question
     */
    public boolean getShowResponseCount();

    /**
     * Returns <code>true</code> if this event poll question is show response count.
     *
     * @return <code>true</code> if this event poll question is show response count; <code>false</code> otherwise
     */
    public boolean isShowResponseCount();

    /**
     * Sets whether this event poll question is show response count.
     *
     * @param showResponseCount the show response count of this event poll question
     */
    public void setShowResponseCount(boolean showResponseCount);

    /**
     * Returns the chart type of this event poll question.
     *
     * @return the chart type of this event poll question
     */
    @AutoEscape
    public String getChartType();

    /**
     * Sets the chart type of this event poll question.
     *
     * @param chartType the chart type of this event poll question
     */
    public void setChartType(String chartType);

    /**
     * Returns the ask for ID of this event poll question.
     *
     * @return the ask for ID of this event poll question
     */
    public boolean getAskForId();

    /**
     * Returns <code>true</code> if this event poll question is ask for ID.
     *
     * @return <code>true</code> if this event poll question is ask for ID; <code>false</code> otherwise
     */
    public boolean isAskForId();

    /**
     * Sets whether this event poll question is ask for ID.
     *
     * @param askForId the ask for ID of this event poll question
     */
    public void setAskForId(boolean askForId);

    /**
     * Returns the id intro of this event poll question.
     *
     * @return the id intro of this event poll question
     */
    @AutoEscape
    public String getIdIntro();

    /**
     * Sets the id intro of this event poll question.
     *
     * @param idIntro the id intro of this event poll question
     */
    public void setIdIntro(String idIntro);

    /**
     * Returns the create date of this event poll question.
     *
     * @return the create date of this event poll question
     */
    public Date getCreateDate();

    /**
     * Sets the create date of this event poll question.
     *
     * @param createDate the create date of this event poll question
     */
    public void setCreateDate(Date createDate);

    /**
     * Returns the enabled of this event poll question.
     *
     * @return the enabled of this event poll question
     */
    public boolean getEnabled();

    /**
     * Returns <code>true</code> if this event poll question is enabled.
     *
     * @return <code>true</code> if this event poll question is enabled; <code>false</code> otherwise
     */
    public boolean isEnabled();

    /**
     * Sets whether this event poll question is enabled.
     *
     * @param enabled the enabled of this event poll question
     */
    public void setEnabled(boolean enabled);

    /**
     * Returns the auto enable of this event poll question.
     *
     * @return the auto enable of this event poll question
     */
    public boolean getAutoEnable();

    /**
     * Returns <code>true</code> if this event poll question is auto enable.
     *
     * @return <code>true</code> if this event poll question is auto enable; <code>false</code> otherwise
     */
    public boolean isAutoEnable();

    /**
     * Sets whether this event poll question is auto enable.
     *
     * @param autoEnable the auto enable of this event poll question
     */
    public void setAutoEnable(boolean autoEnable);

    /**
     * Returns the enable trigger date of this event poll question.
     *
     * @return the enable trigger date of this event poll question
     */
    public Date getEnableTriggerDate();

    /**
     * Sets the enable trigger date of this event poll question.
     *
     * @param enableTriggerDate the enable trigger date of this event poll question
     */
    public void setEnableTriggerDate(Date enableTriggerDate);

    /**
     * Returns the enable trigger timezone of this event poll question.
     *
     * @return the enable trigger timezone of this event poll question
     */
    @AutoEscape
    public String getEnableTriggerTimezone();

    /**
     * Sets the enable trigger timezone of this event poll question.
     *
     * @param enableTriggerTimezone the enable trigger timezone of this event poll question
     */
    public void setEnableTriggerTimezone(String enableTriggerTimezone);

    /**
     * Returns the pic url of this event poll question.
     *
     * @return the pic url of this event poll question
     */
    @AutoEscape
    public String getPicUrl();

    /**
     * Sets the pic url of this event poll question.
     *
     * @param picUrl the pic url of this event poll question
     */
    public void setPicUrl(String picUrl);

    /**
     * Returns the question ID of this event poll question.
     *
     * @return the question ID of this event poll question
     */
    public long getQuestionId();

    /**
     * Sets the question ID of this event poll question.
     *
     * @param questionId the question ID of this event poll question
     */
    public void setQuestionId(long questionId);

    @Override
    public boolean isNew();

    @Override
    public void setNew(boolean n);

    @Override
    public boolean isCachedModel();

    @Override
    public void setCachedModel(boolean cachedModel);

    @Override
    public boolean isEscapedModel();

    @Override
    public Serializable getPrimaryKeyObj();

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj);

    @Override
    public ExpandoBridge getExpandoBridge();

    @Override
    public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

    @Override
    public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext);

    @Override
    public Object clone();

    @Override
    public int compareTo(
        com.liferay.events.global.mobile.model.EventPollQuestion eventPollQuestion);

    @Override
    public int hashCode();

    @Override
    public CacheModel<com.liferay.events.global.mobile.model.EventPollQuestion> toCacheModel();

    @Override
    public com.liferay.events.global.mobile.model.EventPollQuestion toEscapedModel();

    @Override
    public com.liferay.events.global.mobile.model.EventPollQuestion toUnescapedModel();

    @Override
    public String toString();

    @Override
    public String toXmlString();
}
