package com.liferay.events.global.mobile.model.impl;

import com.liferay.events.global.mobile.model.Message;
import com.liferay.events.global.mobile.model.MessageModel;
import com.liferay.events.global.mobile.model.MessageSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Message service. Represents a row in the &quot;Matcher_Message&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.events.global.mobile.model.MessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MessageImpl}.
 * </p>
 *
 * @author James Falkner
 * @see MessageImpl
 * @see com.liferay.events.global.mobile.model.Message
 * @see com.liferay.events.global.mobile.model.MessageModel
 * @generated
 */
@JSON(strict = true)
public class MessageModelImpl extends BaseModelImpl<Message>
    implements MessageModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a message model instance should use the {@link com.liferay.events.global.mobile.model.Message} interface instead.
     */
    public static final String TABLE_NAME = "Matcher_Message";
    public static final Object[][] TABLE_COLUMNS = {
            { "fromId", Types.BIGINT },
            { "toId", Types.BIGINT },
            { "content", Types.VARCHAR },
            { "read_", Types.BOOLEAN },
            { "eventId", Types.VARCHAR },
            { "messageId", Types.BIGINT },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table Matcher_Message (fromId LONG,toId LONG,content TEXT null,read_ BOOLEAN,eventId VARCHAR(75) null,messageId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table Matcher_Message";
    public static final String ORDER_BY_JPQL = " ORDER BY message.messageId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Matcher_Message.messageId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.events.global.mobile.model.Message"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.events.global.mobile.model.Message"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.events.global.mobile.model.Message"),
            true);
    public static long EVENTID_COLUMN_BITMASK = 1L;
    public static long TOID_COLUMN_BITMASK = 2L;
    public static long MESSAGEID_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.events.global.mobile.model.Message"));
    private static ClassLoader _classLoader = Message.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Message.class
        };
    private long _fromId;
    private long _toId;
    private long _originalToId;
    private boolean _setOriginalToId;
    private String _content;
    private boolean _read;
    private String _eventId;
    private String _originalEventId;
    private long _messageId;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private long _columnBitmask;
    private Message _escapedModel;

    public MessageModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Message toModel(MessageSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Message model = new MessageImpl();

        model.setFromId(soapModel.getFromId());
        model.setToId(soapModel.getToId());
        model.setContent(soapModel.getContent());
        model.setRead(soapModel.getRead());
        model.setEventId(soapModel.getEventId());
        model.setMessageId(soapModel.getMessageId());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Message> toModels(MessageSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Message> models = new ArrayList<Message>(soapModels.length);

        for (MessageSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public long getPrimaryKey() {
        return _messageId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setMessageId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _messageId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Message.class;
    }

    @Override
    public String getModelClassName() {
        return Message.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("fromId", getFromId());
        attributes.put("toId", getToId());
        attributes.put("content", getContent());
        attributes.put("read", getRead());
        attributes.put("eventId", getEventId());
        attributes.put("messageId", getMessageId());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long fromId = (Long) attributes.get("fromId");

        if (fromId != null) {
            setFromId(fromId);
        }

        Long toId = (Long) attributes.get("toId");

        if (toId != null) {
            setToId(toId);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        Boolean read = (Boolean) attributes.get("read");

        if (read != null) {
            setRead(read);
        }

        String eventId = (String) attributes.get("eventId");

        if (eventId != null) {
            setEventId(eventId);
        }

        Long messageId = (Long) attributes.get("messageId");

        if (messageId != null) {
            setMessageId(messageId);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }
    }

    @JSON
    @Override
    public long getFromId() {
        return _fromId;
    }

    @Override
    public void setFromId(long fromId) {
        _fromId = fromId;
    }

    @JSON
    @Override
    public long getToId() {
        return _toId;
    }

    @Override
    public void setToId(long toId) {
        _columnBitmask |= TOID_COLUMN_BITMASK;

        if (!_setOriginalToId) {
            _setOriginalToId = true;

            _originalToId = _toId;
        }

        _toId = toId;
    }

    public long getOriginalToId() {
        return _originalToId;
    }

    @JSON
    @Override
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @JSON(include = false)
    @Override
    public boolean getRead() {
        return _read;
    }

    @Override
    public boolean isRead() {
        return _read;
    }

    @Override
    public void setRead(boolean read) {
        _read = read;
    }

    @JSON
    @Override
    public String getEventId() {
        if (_eventId == null) {
            return StringPool.BLANK;
        } else {
            return _eventId;
        }
    }

    @Override
    public void setEventId(String eventId) {
        _columnBitmask |= EVENTID_COLUMN_BITMASK;

        if (_originalEventId == null) {
            _originalEventId = _eventId;
        }

        _eventId = eventId;
    }

    public String getOriginalEventId() {
        return GetterUtil.getString(_originalEventId);
    }

    @JSON
    @Override
    public long getMessageId() {
        return _messageId;
    }

    @Override
    public void setMessageId(long messageId) {
        _messageId = messageId;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
            Message.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Message toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Message) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        MessageImpl messageImpl = new MessageImpl();

        messageImpl.setFromId(getFromId());
        messageImpl.setToId(getToId());
        messageImpl.setContent(getContent());
        messageImpl.setRead(getRead());
        messageImpl.setEventId(getEventId());
        messageImpl.setMessageId(getMessageId());
        messageImpl.setGroupId(getGroupId());
        messageImpl.setCompanyId(getCompanyId());
        messageImpl.setUserId(getUserId());
        messageImpl.setUserName(getUserName());
        messageImpl.setCreateDate(getCreateDate());
        messageImpl.setModifiedDate(getModifiedDate());

        messageImpl.resetOriginalValues();

        return messageImpl;
    }

    @Override
    public int compareTo(Message message) {
        long primaryKey = message.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Message)) {
            return false;
        }

        Message message = (Message) obj;

        long primaryKey = message.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        MessageModelImpl messageModelImpl = this;

        messageModelImpl._originalToId = messageModelImpl._toId;

        messageModelImpl._setOriginalToId = false;

        messageModelImpl._originalEventId = messageModelImpl._eventId;

        messageModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Message> toCacheModel() {
        MessageCacheModel messageCacheModel = new MessageCacheModel();

        messageCacheModel.fromId = getFromId();

        messageCacheModel.toId = getToId();

        messageCacheModel.content = getContent();

        String content = messageCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            messageCacheModel.content = null;
        }

        messageCacheModel.read = getRead();

        messageCacheModel.eventId = getEventId();

        String eventId = messageCacheModel.eventId;

        if ((eventId != null) && (eventId.length() == 0)) {
            messageCacheModel.eventId = null;
        }

        messageCacheModel.messageId = getMessageId();

        messageCacheModel.groupId = getGroupId();

        messageCacheModel.companyId = getCompanyId();

        messageCacheModel.userId = getUserId();

        messageCacheModel.userName = getUserName();

        String userName = messageCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            messageCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            messageCacheModel.createDate = createDate.getTime();
        } else {
            messageCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            messageCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            messageCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        return messageCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{fromId=");
        sb.append(getFromId());
        sb.append(", toId=");
        sb.append(getToId());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", read=");
        sb.append(getRead());
        sb.append(", eventId=");
        sb.append(getEventId());
        sb.append(", messageId=");
        sb.append(getMessageId());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("com.liferay.events.global.mobile.model.Message");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>fromId</column-name><column-value><![CDATA[");
        sb.append(getFromId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>toId</column-name><column-value><![CDATA[");
        sb.append(getToId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>read</column-name><column-value><![CDATA[");
        sb.append(getRead());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>eventId</column-name><column-value><![CDATA[");
        sb.append(getEventId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>messageId</column-name><column-value><![CDATA[");
        sb.append(getMessageId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
